import * as npm from "@npm/types";
export interface NpmRegistryMetadata {
    db_name: string;
    doc_count: number;
    doc_del_count: number;
    update_seq: number;
    purge_seq: number;
    compact_running: boolean;
    disk_size: number;
    data_size: number;
    instance_start_time: string;
    disk_format_version: number;
    committed_update_seq: number;
}
export declare function metadata(): Promise<NpmRegistryMetadata>;
export interface PackumentOptions {
    /** Npm API Token **/
    token: string;
}
export declare function packument(name: string, options?: PackumentOptions): Promise<npm.Packument>;
export declare function packumentVersion(name: string, version: string, options?: PackumentOptions): Promise<npm.PackumentVersion>;
export interface SearchOptions {
    /**	full-text search to apply **/
    text: string;
    /** how many results should be returned (default 20, max 250) **/
    size: number;
    /** offset to return results from **/
    from: number;
    /** how much of an effect should quality have on search results **/
    quality: number;
    /** how much of an effect should popularity have on search results **/
    popularity: number;
    /** how much of an effect should maintenance have on search results **/
    maintenance: number;
}
export interface SearchScore {
    final: number;
    detail: {
        quality: number;
        popularity: number;
        maintenance: number;
    };
}
export interface SearchMaintainer {
    email: string;
    username: string;
}
export interface SearchResult {
    objects: {
        package: {
            name: string;
            scope: string;
            version: string;
            description: string;
            date: string;
            links: {
                npm: string;
                homepage: string;
                bugs: string;
            };
            author: SearchMaintainer & {
                name?: string;
            };
            publisher: SearchMaintainer;
            maintainers: SearchMaintainer[];
        };
        score: SearchScore;
        searchScore: number;
    }[];
    total: number;
    time: string;
}
export declare function search(searchOptions: SearchOptions, options?: PackumentOptions): Promise<unknown>;
