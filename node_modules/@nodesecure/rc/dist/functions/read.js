// Import Node.js Dependencies
import path from "node:path";
import { once } from "node:events";
// Import Third-party Dependencies
import Config from "@slimio/config";
import TR from "ts-results";
// Import Internal Dependencies
import { JSONSchema, generateDefaultRC } from "../rc.js";
import * as CONSTANTS from "../constants.js";
// CONSTANTS
const { Ok, Err } = TR;
export async function read(location = process.cwd(), options = Object.create(null)) {
    try {
        const { createIfDoesNotExist = Boolean(options.createMode), createMode } = options;
        const cfgPath = path.join(location, CONSTANTS.CONFIGURATION_NAME);
        const cfg = new Config(cfgPath, {
            defaultSchema: JSONSchema,
            createOnNoEntry: createIfDoesNotExist
        });
        await cfg.read(createIfDoesNotExist ? generateDefaultRC(createMode) : void 0);
        if (createIfDoesNotExist) {
            await once(cfg, "configWritten");
        }
        const result = cfg.payload;
        await cfg.close();
        return new Ok(result);
    }
    catch (error) {
        return new Err(error);
    }
}
//# sourceMappingURL=read.js.map