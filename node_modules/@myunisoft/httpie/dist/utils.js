"use strict";
/* eslint-disable no-redeclare */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentEnv = exports.env = exports.createAuthorizationHeader = exports.toError = exports.createBody = exports.createHeaders = exports.parseUndiciResponse = exports.getEncodingCharset = exports.isAsyncIterable = exports.DEFAULT_HEADER = void 0;
// Import Third-party Dependencies
const contentType = __importStar(require("content-type"));
// CONSTANTS
const kDefaultMimeType = "text/plain";
const kDefaultUserAgent = "httpie";
const kDefaultEncodingCharset = "utf-8";
const kCharsetConversionTable = {
    "ISO-8859-1": "latin1"
};
exports.DEFAULT_HEADER = { "user-agent": kDefaultUserAgent };
function isAsyncIterable(value) {
    return typeof value[Symbol.asyncIterator] === "function";
}
exports.isAsyncIterable = isAsyncIterable;
/**
 * @description Get a valid Node.js charset from the "content-type" http header.
 * @see https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings
 */
function getEncodingCharset(charset = kDefaultEncodingCharset) {
    if (Buffer.isEncoding(charset)) {
        return charset;
    }
    return charset in kCharsetConversionTable ? kCharsetConversionTable[charset] : "utf-8";
}
exports.getEncodingCharset = getEncodingCharset;
/**
 * @description Parse Undici ResponseData (the body is a Node.js Readable Stream).
 * If the response as a content type equal to 'application/json' we automatically parse it with JSON.parse().
 */
async function parseUndiciResponse(response) {
    var _a;
    const { type, parameters } = contentType.parse((_a = response.headers["content-type"]) !== null && _a !== void 0 ? _a : kDefaultMimeType);
    response.body.setEncoding(getEncodingCharset(parameters.charset));
    // Reading the Node.js Stream with the AsyncIterable interface.
    let body = "";
    for await (const data of response.body) {
        body += data;
    }
    try {
        return type === "application/json" ? JSON.parse(body) : body;
    }
    catch (error) {
        // Note: Even in case of an error we want to be able to recover the body that caused the JSON parsing error.
        error.body = body;
        throw error;
    }
}
exports.parseUndiciResponse = parseUndiciResponse;
/**
 * @description Create a default plain Object headers that will contains a Set of default values like:
 * - User-agent
 * - Authorization
 */
function createHeaders(options) {
    var _a;
    const headers = Object.assign((_a = options.headers) !== null && _a !== void 0 ? _a : {}, exports.DEFAULT_HEADER);
    if (options.authorization) {
        headers.Authorization = createAuthorizationHeader(options.authorization);
    }
    return headers;
}
exports.createHeaders = createHeaders;
/**
 * @description Generate a proper body for Undici Client. This method was mainly created to automatically manage JSON content.
 */
function createBody(body, headers = {}) {
    if (typeof body === "undefined") {
        return void 0;
    }
    if (isAsyncIterable(body)) {
        return body;
    }
    let finalBody = body;
    if (body instanceof URLSearchParams) {
        headers["content-type"] = "application/x-www-form-urlencoded";
        finalBody = body.toString();
    }
    else if (typeof body === "object" && !Buffer.isBuffer(body)) {
        headers["content-type"] = "application/json";
        finalBody = JSON.stringify(body);
    }
    headers["content-length"] = String(Buffer.byteLength(finalBody));
    return finalBody;
}
exports.createBody = createBody;
/**
 * @description Helpers function to generate an Error with all the required properties from the response.
 * We attach them to the error so that they can be retrieved by the developer in a Catch block.
 */
function toError(response) {
    const err = new Error(response.statusMessage);
    err.statusMessage = response.statusMessage;
    err.statusCode = response.statusCode;
    err.headers = response.headers;
    err.data = response.data;
    return err;
}
exports.toError = toError;
/**
 * @description Helpers to generate a Basic or Bearer token for the HTTP Authorization header.
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization
 */
function createAuthorizationHeader(authorizationHeaderValue) {
    const isBasicAuthToken = authorizationHeaderValue.includes(":");
    return isBasicAuthToken ?
        `Basic ${Buffer.from(authorizationHeaderValue).toString("base64")}` :
        `Bearer ${authorizationHeaderValue}`;
}
exports.createAuthorizationHeader = createAuthorizationHeader;
exports.env = process.env;
function getCurrentEnv() {
    var _a;
    const currentEnv = ((_a = exports.env.NODE_ENV) !== null && _a !== void 0 ? _a : "dev").toLowerCase();
    if (currentEnv.startsWith("prod")) {
        return "prod";
    }
    else if (currentEnv.startsWith("staging") || currentEnv.startsWith("preprod")) {
        return "preprod";
    }
    return "dev";
}
exports.getCurrentEnv = getCurrentEnv;
//# sourceMappingURL=utils.js.map