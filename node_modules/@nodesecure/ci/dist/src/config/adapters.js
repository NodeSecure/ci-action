import { constants, accessSync } from "fs";
import { resolve } from "path";
import * as RC from "../nodesecurerc.js";
function isValidRootDirectory(directory) {
    try {
        accessSync(directory, constants.F_OK);
        return resolve(directory);
    }
    catch {
        return RC.DEFAULT_RUNTIME_CONFIGURATION.rootDir;
    }
}
export function adaptDirectory(directory) {
    return isValidRootDirectory(directory);
}
function isValidReporter(reporter) {
    return Object.values(RC.reporterTarget).includes(reporter);
}
export function adaptReporters(reporters) {
    if (Array.isArray(reporters)) {
        const uniqReporters = new Set(reporters);
        return [...uniqReporters].filter(isValidReporter);
    }
    const reportersAsArray = reporters.replace(/\s/g, "").split(",");
    return [...new Set(reportersAsArray)].filter(isValidReporter);
}
function isValidWarnings(inputWarnings) {
    return Object.values(RC.warnings).includes(inputWarnings);
}
export function adaptWarnings(warnings) {
    if (isValidWarnings(warnings)) {
        return warnings;
    }
    return RC.warnings.ERROR;
}
function isValidStrategy(strategy) {
    const validStrategies = Object.keys(RC.vulnStrategy);
    return validStrategies.includes(strategy);
}
export function adaptStrategy(strategy) {
    if (isValidStrategy(strategy)) {
        return RC.vulnStrategy[strategy];
    }
    return RC.vulnStrategy.npm;
}
function isValidSeverity(threshold) {
    return Object.values(RC.vulnSeverity).includes(threshold);
}
export function adaptSeverity(vulnerabilityThreshold) {
    if (isValidSeverity(vulnerabilityThreshold)) {
        return vulnerabilityThreshold;
    }
    return RC.vulnSeverity.ALL;
}
//# sourceMappingURL=adapters.js.map