import { Scanner } from "@nodesecure/scanner";
import { GlobalWarning } from "@nodesecure/scanner/types/scanner";
import { Nsci } from "../../configuration/standard/index.js";
import { pipeline } from "../../reporting/index.js";
import { WorkableVulnerability } from "../extraction/extract.js";
import { DependencyWarningWithMode } from "./warnings.js";
export interface InterpretedScannerPayload {
    warnings: GlobalWarning;
    dependencies: {
        warnings: DependencyWarningWithMode[];
        vulnerabilities: WorkableVulnerability[];
    };
}
export declare type OutcomePayloadFromPipelineChecks = {
    status: pipeline.Status;
    data: InterpretedScannerPayload;
};
/**
 * This interpreter accumulates each Check Function output in order to determine
 * a global pipeline status and at the same time compact the original payload to
 * simplify the reporting step.
 * In other words "status" is used to decide if the pipeline should fail or pass,
 * whereas the data is compacted in order to be easily reported by any type of
 * reporter (HTML, Console, etc).
 */
export declare function runPayloadInterpreter(payload: Scanner.Payload, rc: Nsci.Configuration): OutcomePayloadFromPipelineChecks;
