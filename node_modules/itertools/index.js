"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "all", {
  enumerable: true,
  get: function get() {
    return _builtins.all;
  }
});
Object.defineProperty(exports, "any", {
  enumerable: true,
  get: function get() {
    return _builtins.any;
  }
});
Object.defineProperty(exports, "contains", {
  enumerable: true,
  get: function get() {
    return _builtins.contains;
  }
});
Object.defineProperty(exports, "enumerate", {
  enumerable: true,
  get: function get() {
    return _builtins.enumerate;
  }
});
Object.defineProperty(exports, "filter", {
  enumerable: true,
  get: function get() {
    return _builtins.filter;
  }
});
Object.defineProperty(exports, "iter", {
  enumerable: true,
  get: function get() {
    return _builtins.iter;
  }
});
Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function get() {
    return _builtins.map;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function get() {
    return _builtins.max;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function get() {
    return _builtins.min;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function get() {
    return _builtins.range;
  }
});
Object.defineProperty(exports, "reduce", {
  enumerable: true,
  get: function get() {
    return _builtins.reduce;
  }
});
Object.defineProperty(exports, "sorted", {
  enumerable: true,
  get: function get() {
    return _builtins.sorted;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function get() {
    return _builtins.sum;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function get() {
    return _builtins.zip;
  }
});
Object.defineProperty(exports, "zip3", {
  enumerable: true,
  get: function get() {
    return _builtins.zip3;
  }
});
Object.defineProperty(exports, "chain", {
  enumerable: true,
  get: function get() {
    return _itertools.chain;
  }
});
Object.defineProperty(exports, "compress", {
  enumerable: true,
  get: function get() {
    return _itertools.compress;
  }
});
Object.defineProperty(exports, "count", {
  enumerable: true,
  get: function get() {
    return _itertools.count;
  }
});
Object.defineProperty(exports, "cycle", {
  enumerable: true,
  get: function get() {
    return _itertools.cycle;
  }
});
Object.defineProperty(exports, "dropwhile", {
  enumerable: true,
  get: function get() {
    return _itertools.dropwhile;
  }
});
Object.defineProperty(exports, "groupby", {
  enumerable: true,
  get: function get() {
    return _itertools.groupby;
  }
});
Object.defineProperty(exports, "icompress", {
  enumerable: true,
  get: function get() {
    return _itertools.icompress;
  }
});
Object.defineProperty(exports, "ifilter", {
  enumerable: true,
  get: function get() {
    return _itertools.ifilter;
  }
});
Object.defineProperty(exports, "imap", {
  enumerable: true,
  get: function get() {
    return _itertools.imap;
  }
});
Object.defineProperty(exports, "islice", {
  enumerable: true,
  get: function get() {
    return _itertools.islice;
  }
});
Object.defineProperty(exports, "izip", {
  enumerable: true,
  get: function get() {
    return _itertools.izip;
  }
});
Object.defineProperty(exports, "izip2", {
  enumerable: true,
  get: function get() {
    return _itertools.izip2;
  }
});
Object.defineProperty(exports, "izip3", {
  enumerable: true,
  get: function get() {
    return _itertools.izip3;
  }
});
Object.defineProperty(exports, "izipMany", {
  enumerable: true,
  get: function get() {
    return _itertools.izipMany;
  }
});
Object.defineProperty(exports, "izipLongest", {
  enumerable: true,
  get: function get() {
    return _itertools.izipLongest;
  }
});
Object.defineProperty(exports, "permutations", {
  enumerable: true,
  get: function get() {
    return _itertools.permutations;
  }
});
Object.defineProperty(exports, "takewhile", {
  enumerable: true,
  get: function get() {
    return _itertools.takewhile;
  }
});
Object.defineProperty(exports, "zipLongest", {
  enumerable: true,
  get: function get() {
    return _itertools.zipLongest;
  }
});
Object.defineProperty(exports, "zipMany", {
  enumerable: true,
  get: function get() {
    return _itertools.zipMany;
  }
});
Object.defineProperty(exports, "chunked", {
  enumerable: true,
  get: function get() {
    return _moreItertools.chunked;
  }
});
Object.defineProperty(exports, "flatten", {
  enumerable: true,
  get: function get() {
    return _moreItertools.flatten;
  }
});
Object.defineProperty(exports, "heads", {
  enumerable: true,
  get: function get() {
    return _moreItertools.heads;
  }
});
Object.defineProperty(exports, "itake", {
  enumerable: true,
  get: function get() {
    return _moreItertools.itake;
  }
});
Object.defineProperty(exports, "pairwise", {
  enumerable: true,
  get: function get() {
    return _moreItertools.pairwise;
  }
});
Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function get() {
    return _moreItertools.partition;
  }
});
Object.defineProperty(exports, "roundrobin", {
  enumerable: true,
  get: function get() {
    return _moreItertools.roundrobin;
  }
});
Object.defineProperty(exports, "take", {
  enumerable: true,
  get: function get() {
    return _moreItertools.take;
  }
});
Object.defineProperty(exports, "uniqueEverseen", {
  enumerable: true,
  get: function get() {
    return _moreItertools.uniqueEverseen;
  }
});
Object.defineProperty(exports, "uniqueJustseen", {
  enumerable: true,
  get: function get() {
    return _moreItertools.uniqueJustseen;
  }
});
Object.defineProperty(exports, "compact", {
  enumerable: true,
  get: function get() {
    return _custom.compact;
  }
});
Object.defineProperty(exports, "compactObject", {
  enumerable: true,
  get: function get() {
    return _custom.compactObject;
  }
});
Object.defineProperty(exports, "first", {
  enumerable: true,
  get: function get() {
    return _custom.first;
  }
});
Object.defineProperty(exports, "flatmap", {
  enumerable: true,
  get: function get() {
    return _custom.flatmap;
  }
});
Object.defineProperty(exports, "icompact", {
  enumerable: true,
  get: function get() {
    return _custom.icompact;
  }
});

var _builtins = require("./builtins");

var _itertools = require("./itertools");

var _moreItertools = require("./more-itertools");

var _custom = require("./custom");