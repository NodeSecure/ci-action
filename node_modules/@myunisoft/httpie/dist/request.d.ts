/// <reference types="node" />
/// <reference types="node" />
import { IncomingHttpHeaders } from "http";
import { URLSearchParams } from "url";
import * as undici from "undici";
import { HttpMethod } from "undici/types/dispatcher";
export declare type InlineCallbackAction = <T>(fn: () => Promise<T>) => Promise<T>;
export interface ReqOptions {
    /** Default: 0 */
    maxRedirections?: number;
    /** Default: { "user-agent": "httpie" } */
    headers?: IncomingHttpHeaders;
    querystring?: string | URLSearchParams;
    body?: any;
    authorization?: string;
    agent?: undici.Agent | undici.ProxyAgent | undici.MockAgent;
    limit?: InlineCallbackAction;
}
export interface RequestResponse<T> {
    data: T;
    headers: IncomingHttpHeaders;
    statusMessage: string;
    statusCode: number;
}
/**
 * @description httpie "like" request wrapper that use new Node.js http client undici under the hood.
 * @see https://github.com/nodejs/undici
 *
 * @example
 * const { statusCode, data } = await request("GET", "https://ws-dev.myunisoft.fr/ws_monitoring");
 * console.log(statusCode, data); // 200 "true"
 */
export declare function request<T>(method: HttpMethod, uri: string | URL, options?: ReqOptions): Promise<RequestResponse<T>>;
export declare type RequestCallback = <T>(uri: string | URL, options?: ReqOptions) => Promise<RequestResponse<T>>;
export declare const get: RequestCallback;
export declare const post: RequestCallback;
export declare const put: RequestCallback;
export declare const del: RequestCallback;
export declare const patch: RequestCallback;
