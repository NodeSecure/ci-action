// Import Third-party Dependencies
import { table } from "table";
// Import Internal Dependencies
import { consolePrinter } from "../../../../../lib/console-printer/index.js";
import { pipeline } from "../../../index.js";
import { buildDependenciesWarningsOutcomeMessage } from "./dependency-warnings.js";
import { buildGlobalWarningsOutcomeMessage } from "./global-warnings.js";
import { buildVulnerabilitiesOutcomeMessage } from "./vulnerabilities.js";
export function printPipelineOutcome(payload, status, warningsMode) {
    const { warnings: globalWarnings, dependencies: { warnings, vulnerabilities } } = payload;
    const globalWarningsOutcomeMsg = buildGlobalWarningsOutcomeMessage(globalWarnings.length, warningsMode);
    const depsWarningsOutcomeMsg = buildDependenciesWarningsOutcomeMessage(warnings, warningsMode);
    const vulnsConsoleOutcomeMsg = buildVulnerabilitiesOutcomeMessage(vulnerabilities.length);
    const tableConfig = {
        columns: [
            { alignment: "center" },
            { alignment: "center" },
            { alignment: "center" }
        ]
    };
    const tableData = [
        [
            consolePrinter.font.standard("Global Warnings").bold().message,
            consolePrinter.font.standard("Dependency Warnings").bold().message,
            consolePrinter.font.standard("Vulnerabilities").bold().message
        ],
        [
            globalWarningsOutcomeMsg.message,
            depsWarningsOutcomeMsg.message,
            vulnsConsoleOutcomeMsg.message
        ]
    ];
    consolePrinter.util.emptyLine();
    consolePrinter.font.standard(table(tableData, tableConfig)).print();
    if (status === pipeline.status.SUCCESS) {
        consolePrinter.font
            .highlightedSuccess("✓ [SUCCESS] Pipeline successful ")
            .bold()
            .print();
    }
    else {
        consolePrinter.font.highlightedError("✖ [FAILURE] Pipeline failed").print();
    }
    consolePrinter.util.emptyLine();
}
//# sourceMappingURL=outcome.js.map