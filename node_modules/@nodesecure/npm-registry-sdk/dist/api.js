// Import Internal Dependencies
import * as httpie from "@myunisoft/httpie";
import { httpRegistryAgent, getLocalRegistryURL, buildDownloadsURL } from "./registry.js";
import { clamp } from "./utils.js";
export async function downloads(pkgName, period = "last-week") {
    if (typeof pkgName !== "string" || pkgName.length === 0) {
        throw new TypeError("Argument `pkgName` must be a non empty string");
    }
    const url = buildDownloadsURL(pkgName, period);
    const { data } = await httpie.get(url);
    return data;
}
export async function metadata() {
    const { data } = await httpie.get(getLocalRegistryURL(), {
        agent: httpRegistryAgent
    });
    return data;
}
export async function packument(name, options) {
    const path = new URL(name, getLocalRegistryURL());
    const { data } = await httpie.get(path, {
        authorization: options?.token,
        agent: httpRegistryAgent
    });
    return data;
}
export async function packumentVersion(name, version, options) {
    const path = new URL(`${name}/${version}`, getLocalRegistryURL());
    const { data } = await httpie.get(path, {
        authorization: options?.token,
        agent: httpRegistryAgent
    });
    return data;
}
export async function search(searchOptions, options) {
    const { text, size, from, quality, popularity, maintenance } = searchOptions;
    const query = new URL("/-/v1/search", getLocalRegistryURL());
    if (typeof text === "string") {
        query.searchParams.set("text", text);
    }
    if (typeof size === "number") {
        query.searchParams.set("size", String(clamp(size, 0, 250)));
    }
    if (typeof from === "number") {
        query.searchParams.set("from", String(from));
    }
    if (typeof quality === "number") {
        query.searchParams.set("quality", String(clamp(quality, 0, 1)));
    }
    if (typeof popularity === "number") {
        query.searchParams.set("popularity", String(clamp(popularity, 0, 1)));
    }
    if (typeof maintenance === "number") {
        query.searchParams.set("maintenance", String(clamp(maintenance, 0, 1)));
    }
    const { data } = await httpie.get(query, {
        agent: httpRegistryAgent,
        authorization: options?.token
    });
    return data;
}
//# sourceMappingURL=api.js.map