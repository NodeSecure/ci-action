import { fromBooleanToCheckResult } from "./checkable.js";
const kSeverities = {
    critical: 4,
    high: 3,
    medium: 2,
    low: 1,
    info: 0,
    all: 0
};
const kDefaultSeverity = 0;
function fromSeverityToNumber(severity) {
    if (severity !== undefined) {
        return kSeverities[severity];
    }
    /**
     * When no severity is available on the dependency, which severity should
     * we affect as a default value?
     */
    return kDefaultSeverity;
}
function compareVulnSeverityWithThreshold(severityThreshold) {
    return (vulnerability) => fromSeverityToNumber(vulnerability.severity) >=
        fromSeverityToNumber(severityThreshold);
}
/**
 * We must ensure that each vulnerability with equal or higher severity than
 * the one defined in the runtime configuration is caught.
 */
function findAllVulnsExceedingSeverityThreshold(vulnerabilities, severityThreshold) {
    const isVulnExceedingSeverityThreshold = compareVulnSeverityWithThreshold(severityThreshold);
    return vulnerabilities.filter(isVulnExceedingSeverityThreshold);
}
export function checkDependenciesVulns(vulnerabilities, runtimeConfiguration) {
    const { vulnerabilitySeverity } = runtimeConfiguration;
    const vulnsClassifiedBySeverity = findAllVulnsExceedingSeverityThreshold(vulnerabilities, vulnerabilitySeverity);
    return {
        result: fromBooleanToCheckResult(vulnsClassifiedBySeverity.length > 0),
        data: {
            key: "dependencies.vulnerabilities",
            value: vulnsClassifiedBySeverity
        }
    };
}
//# sourceMappingURL=vulnerabilities.js.map