"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeURI = exports.detectAgentFromURI = exports.computeURIOnAllAgents = exports.isAgentPathMatchingURI = exports.agents = exports.URICache = void 0;
const lru_cache_1 = __importDefault(require("lru-cache"));
const utils_1 = require("./utils");
// CONSTANTS
const kEnvName = (0, utils_1.getCurrentEnv)();
/**
 * @see https://en.wikipedia.org/wiki/Page_replacement_algorithm
 */
exports.URICache = new lru_cache_1.default({
    max: 100,
    ttl: 1000 * 60 * 120
});
exports.agents = new Set();
/**
 * @description Detect if a given string URI is matching a given Agent custom path.
 *
 * @example
 * const URI = computeAgentPath("/windev/ws_monitoring", windev);
 * assert.strictEqual(URI, "https://ws-dev.myunisoft.fr/ws_monitoring");
 */
function isAgentPathMatchingURI(uri, agent) {
    // Note: we want to match both '/path/xxx...' and 'path/xxx...'
    const localCustomPath = uri.charAt(0) === "/" ? `/${agent.customPath}` : agent.customPath;
    return uri.startsWith(localCustomPath) ?
        new URL(uri.slice(localCustomPath.length), agent[kEnvName]) :
        null;
}
exports.isAgentPathMatchingURI = isAgentPathMatchingURI;
/**
 * @description Compute a given string URI to the local list of agents.
 */
function computeURIOnAllAgents(uri) {
    var _a;
    for (const agent of exports.agents) {
        const url = isAgentPathMatchingURI(uri, agent);
        if (url !== null) {
            return { url, agent: agent.agent, limit: agent.limit };
        }
    }
    const url = new URL(uri);
    const agent = detectAgentFromURI(url);
    return {
        url, agent: (_a = agent === null || agent === void 0 ? void 0 : agent.agent) !== null && _a !== void 0 ? _a : null, limit: agent === null || agent === void 0 ? void 0 : agent.limit
    };
}
exports.computeURIOnAllAgents = computeURIOnAllAgents;
/**
 * @description Seek correspondence with local agents through the URI hostname
 * @see https://nodejs.org/api/url.html#url_url_hostname
 *
 * @example
 * detectAgentFromURI("https://ws-dev.myunisoft.fr/ws_monitoring"); // windev agent
 * detectAgentFromURI("https://www.google.fr/"); // null
 */
function detectAgentFromURI(uri) {
    const hostname = uri.hostname;
    for (const agent of exports.agents) {
        if (agent.domains.has(hostname)) {
            return agent;
        }
    }
    return null;
}
exports.detectAgentFromURI = detectAgentFromURI;
/**
 * @description Compute a given URI (format string or WHATWG URL) and return a fully build URL and paired agent.
 * Under the hood it use a LRU cache
 */
function computeURI(uri) {
    var _a;
    if (exports.URICache.has(uri)) {
        return exports.URICache.get(uri);
    }
    let response;
    if (typeof uri === "string") {
        response = computeURIOnAllAgents(uri);
    }
    else {
        const agent = detectAgentFromURI(uri);
        response = { url: uri, agent: (_a = agent === null || agent === void 0 ? void 0 : agent.agent) !== null && _a !== void 0 ? _a : null, limit: agent === null || agent === void 0 ? void 0 : agent.limit };
    }
    exports.URICache.set(uri, response);
    return response;
}
exports.computeURI = computeURI;
//# sourceMappingURL=agents.js.map